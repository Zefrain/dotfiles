#!/usr/bin/env bash

readonly REMAIN_VERSION=3 # 保留最新的版本数

declare OSTYPE="Unknown"
declare RELEASE_CAN_DELETE=1 # 是否可以删除旧版本的 tag 和 release
declare TAGS_EXCLUDE_LIST

get_os_type() {
  local uname_s
  uname_s=$(uname -s)
  case "$uname_s" in
  Darwin*)
    OSTYPE="Darwin"
    ;;
  Linux*)
    OSTYPE="Linux"
    [ -f /etc/os-release ] && source /etc/os-release
    ;;
  MING* | MSYS* | CYGW*)
    OSTYPE="Windows"
    ;;
  *)
    OSTYPE="Unknown"
    ;;
  esac
}

install_dependencies() {

  packages_to_install=(gh)

  if [[ "$OSTYPE" == "darwin"* ]]; then
    if ! command -v brew &>/dev/null; then
      echo "Homebrew is not installed. Please install it from https://brew.sh/."
      exit 1
    fi
    brew install gh || {
      echo "Failed to install gh using Homebrew. Please install it manually."
      exit 1
    }
  elif [[ "$OSTYPE" == "linux"* ]]; then

    if [ -f /etc/os-release ]; then
      . /etc/os-release
    fi

    if [[ "$ID" == "ubuntu" || "$ID" == "debian" ]]; then
      sudo apt-get update
      sudo apt-get install -y "${packages_to_install[@]}" || {
        echo "Failed to install gh using apt. Trying snap..."
        if ! command -v snap &>/dev/null; then
          echo "Snap is not installed. Please install it first."
          exit 1
        fi
        sudo snap install gh || {
          echo "Failed to install gh using snap. Please install it manually."
          exit 1
        }
      }
    elif [[ "$ID" == "fedora" || "$ID" == "rhel" || "$ID" == "centos" ]]; then
      if command -v dnf &>/dev/null; then
        sudo dnf install -y "${packages_to_install[@]}" || {
          echo "Failed to install gh using dnf. Please install it manually."
          exit 1
        }
      elif command -v yum &>/dev/null; then
        sudo yum install -y "${packages_to_install[@]}" || {
          echo "Failed to install gh using yum. Please install it manually."
          exit 1
        }
      else
        echo "Neither dnf nor yum found. Cannot install gh."
        exit 1
      fi
    elif [[ "$ID" == "arch" ]]; then
      sudo pacman -S --noconfirm "${packages_to_install[@]}" || {
        echo "Failed to install gh using pacman. Please install it manually."
        exit 1
      }
    else
      echo "Unsupported Linux distribution: $ID"
      exit 1
    fi

    if ! command -v gh &>/dev/null; then
      echo "Package installation failed. Please install gh manually."
      exit 1
    fi
  elif [[ "$OSTYPE" == "msys"* || "$OSTYPE" == "cygwin"* || "$OSTYPE" == "win"* ]]; then
    echo "Please install GitHub CLI from https://cli.github.com/."
    exit 1
  else
    echo "Unsupported OS type: $OSTYPE"
    exit 1
  fi

  if command -v npm &>/dev/null; then
    if ! npm list -g semver &>/dev/null; then
      npm install -g semver || {
        echo "Failed to install semver using npm. Please install it manually."
        exit 1
      }
    fi
  fi
}

setup_github_cli() {
  if ! command -v gh &>/dev/null; then
    echo "gh CLI is not installed. Please install it from https://cli.github.com/."
    install_dependencies || echo "Failed to install dependencies. Please install gh CLI manually." && RELEASE_CAN_DELETE=0
  fi

  # Check if user is authenticated with GitHub CLI
  if [[ $RELEASE_CAN_DELETE -eq 0 ]]; then
    echo "Skipping authentication check due to previous errors."
    return
  fi

  if RELEASE! gh auth status &>/dev/null; then
    gh auth login
  fi
  # Ensure the repository is set up correctly
  if ! gh repo view &>/dev/null; then
    RELEASE_CAN_DELETE=0
  fi
}

bump_version() {

  # Get latest semantic version tag
  LAST_TAG=$(git describe --tags --match "v*" --abbrev=0 2>/dev/null)

  # Set initial version if no tags exist
  if [ -z "$LAST_TAG" ]; then
    CURRENT_VERSION="v0.0.0"
  else
    CURRENT_VERSION="$LAST_TAG"
  fi

  # Analyze commit messages since last tag
  COMMITS_SINCE_TAG=$(git log --pretty=format:"%s" "$CURRENT_VERSION"..HEAD)
  if [[ -z "$COMMITS_SINCE_TAG" ]]; then
    echo "$CURRENT_VERSION"
    return
  fi

  # Determine version bump type
  BUMP_TYPE="patch"
  while IFS= read -r commit_msg; do
    if [[ "$commit_msg" =~ ^BREAKING\ CHANGE: ]]; then
      BUMP_TYPE="major"
      break
    elif [[ "$commit_msg" =~ ^feat: ]]; then
      BUMP_TYPE="minor"
    elif [[ "$commit_msg" =~ ^(fix|docs|style|refactor|perf|test|chore): ]] && [ "$BUMP_TYPE" != "minor" ]; then
      BUMP_TYPE="patch"
    else
      continue
    fi
  done <<<"$COMMITS_SINCE_TAG"

  # Bump version using semver-tool if available
  if command -v semver &>/dev/null; then
    NEXT_VERSION="v$(semver -i "$BUMP_TYPE" "${CURRENT_VERSION#v}")"
  else
    # Fallback version bump logic
    IFS='.' read -ra PARTS <<<"${CURRENT_VERSION#v}"
    MAJOR=${PARTS[0]}
    MINOR=${PARTS[1]}
    PATCH=${PARTS[2]}

    case "$BUMP_TYPE" in
    "major")
      MAJOR=$((MAJOR + 1))
      MINOR=0
      PATCH=0
      ;;
    "minor")
      MINOR=$((MINOR + 1))
      PATCH=0
      ;;
    "patch")
      PATCH=$((PATCH + 1))
      ;;
    esac
    NEXT_VERSION="v$MAJOR.$MINOR.$PATCH"
  fi

  # Update version in package.json (example)
  # sed -i "s/\"version\": \".*\"/\"version\": \"${NEXT_VERSION#v}\"/" package.json

  echo "$NEXT_VERSION"
}

remove_old_version() {

  if [[ "${TAGS_EXCLUDE_LIST}" == "all" ]]; then
    echo "Excluding all tags from deletion."
    return 0
  fi

  TAGS_TO_DELETE=$(git tag --sort=-v:refname | tail -n +$((REMAIN_VERSION)) | tr '\n' ' ')
  echo "Tags to delete: ${TAGS_TO_DELETE// /, }"

  for TAG in $TAGS_TO_DELETE; do

    # Check if tag is in the exclude list
    if [[ " ${TAGS_EXCLUDE_LIST[@]} " =~ " $TAG " ]]; then
      echo "Skipping tag: $TAG (excluded)"
      continue
    fi

    echo "Deleting tag: $TAG"

    # 删除本地 tag
    git tag -d "$TAG"

    # # 删除远程 tag
    # git push origin ":refs/tags/$TAG"
    #
    if [[ $RELEASE_CAN_DELETE -eq 0 ]]; then
      echo "Skipping release deletion for tag: $TAG"
      continue
    else
      # 删除 GitHub release（需要 gh CLI）
      gh release delete "$TAG" --yes || echo "Release $TAG not found or already deleted"
    fi

  done
  # 删除远程 tag
  git push origin --prune --tags

  echo "Old versions deleted successfully."
}

git_handle_version() {
  # Bump version and get new version number
  NEXT_VERSION=$(bump_version)

  remove_old_version || echo "Failed to remove old versions. Exiting."

  # Create new git tag only if current commit is not already tagged
  if ! git tag --points-at HEAD | grep -q "^$NEXT_VERSION$"; then
    git tag -a "$NEXT_VERSION" -m "Version $NEXT_VERSION"
  fi

  git tag -f latest "$NEXT_VERSION" || {
    echo "Failed to update latest tag. Exiting."
    return 1
  }

  if git push && git push --tags -f; then
    :
  else
    echo "Failed to push tags to remote. Exiting."
    exit 1
  fi
}

prompt_for_excluding() {
  read -p "Enter tags to exclude from deletion (space-separated): " -a TAGS_EXCLUDE_LIST
}

main() {
  get_os_type
  prompt_for_excluding || { echo "Failed to get tags to exclude. Exiting."; }
  setup_github_cli || { echo "Failed to set up GitHub CLI. Exiting."; }
  git_handle_version || { echo "Failed to handle versioning. Exiting."; }
}

trap '' SIGINT SIGTERM SIGQUIT

main
