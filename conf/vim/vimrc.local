hi Normal  ctermfg=252 ctermbg=none

" Shortcuts {
    " 定义快捷键到行首和行尾
    nmap LB 0
    nmap LE $

    " 设置快捷键将选中文本块复制至系统剪贴板
    vnoremap <Leader>y "+y
    " 设置快捷键将系统剪贴板内容粘贴至 vim
    nmap <Leader>p "+p
    " 定义快捷键关闭当前分割窗口
    nmap <Leader>q :q<CR>
    " 定义快捷键保存当前窗口内容
    nmap <Leader>w :w!<CR>
    " 定义快捷键保存当前窗口内容
    nmap <Leader>W :wa!<CR>
    " 定义快捷键保存所有窗口内容并退出 vim
    nmap <Leader>WQ :wa!<CR>:q<CR>
    " 不做任何保存，直接退出 vim
    nmap <Leader>Q :qa!<CR>
    " 依次遍历子窗口
    " nnoremap nw <C-W><C-W>
    " 跳转至右方的窗口
    nnoremap <Leader>lw <C-W>l
    " 跳转至左方的窗口
    nnoremap <Leader>hw <C-W>h
    " 跳转至上方的子窗口
    nnoremap <Leader>kw <C-W>k
    " 跳转至下方的子窗口
    nnoremap <Leader>jw <C-W>j
    " 定义快捷键在结对符之间跳转
    nmap <Leader>m %
" }


" vim-easy-align {
    if isdirectory(expand("~/.vim/bundle/vim-easy-align"))
        " Start interactive EasyAlign in visual mode (e.g. vipga)
        xmap ga <Plug>(EasyAlign)

        " Start interactive EasyAlign for a motion/text object (e.g. gaip)
        nmap ga <Plug>(EasyAlign)

        let g:easy_align_delimiters = {
                    \ '>': { 'pattern': '>>\|=>\|>' },
                    \ '/': {
                    \     'pattern':         '//\+\|/\*\|\*/',
                    \     'delimiter_align': 'l',
                    \     'ignore_groups':   ['!Comment'] },
                    \ ']': {
                    \     'pattern':       '[[\]]',
                    \     'left_margin':   0,
                    \     'right_margin':  0,
                    \     'stick_to_left': 0
                    \   },
                    \ ')': {
                    \     'pattern':       '[()]',
                    \     'left_margin':   0,
                    \     'right_margin':  0,
                    \     'stick_to_left': 0
                    \   },
                    \ 'd': {
                    \     'pattern':      ' \(\S\+\s*[;=]\)\@=',
                    \     'left_margin':  0,
                    \     'right_margin': 0
                    \   }
                    \ }
    endif
" }



" YouCompleteMe {
    if isdirectory(expand("~/.vim/bundle/YouCompleteMe"))
        autocmd FileType c   let g:ycm_global_ycm_extra_conf = "/home/zhoush/Templates/ycm.c.py"
        autocmd FileType cpp let g:ycm_global_ycm_extra_conf = "/home/zhoush/Templates/ycm.cpp.py"
        " 不显示开启vim时检查ycm_extra_conf文件的信息
        let g:ycm_confirm_extra_conf=0
        " 开启基于tag的补全，可以在这之后添加需要的标签路径
        let g:ycm_collect_identifiers_from_tags_files=1
        "注释和字符串中的文字也会被收入补全
        let g:ycm_collect_identifiers_from_comments_and_strings = 0
        " 输入第2个字符开始补全
        let g:ycm_min_num_of_chars_for_completion=2
        " 禁止缓存匹配项,每次都重新生成匹配项
        let g:ycm_cache_omnifunc=0
        " 开启语义补全
        let g:ycm_seed_identifiers_with_syntax=1    
        "在注释输入中也能补全
        let g:ycm_complete_in_comments = 1
        "在字符串输入中也能补全
        let g:ycm_complete_in_strings = 1
        " 设置在下面几种格式的文件上屏蔽ycm
        let g:ycm_filetype_blacklist = {
                    \ 'tagbar' : 1,
                    \ 'nerdtree' : 1,
                    \}

        "youcompleteme use python3 version
        " let g:ycm_server_python_interpreter = '/usr/bin/python3'

        nnoremap <leader>jd :YcmCompleter GoTo<CR>

    endif
" }


" Encoding {
    set enc=utf8 
    set fencs=utf8,gbk,gb2312,gb18030,cp936 
" }



" XML {
    " autocmd FileType xml let g:xml_syntax_folding = 1
    " autocmd Filetype xml let g:xml_namespace_transparent=1
" }

" Python-mode {
    if isdirectory(expand("~/.vim/bundle/python-mode"))
        autocmd FileType py,python let g:pymode=1
        " let g:pymode_python = 'python3'
        let g:pymode_indent = 1
    endif
" }

" vim-airline {
    if isdirectory(expand("~/.vim/bundle/vim-airline"))
    "     " let g:airline_theme = 'luna'
    "     " airline设置
    "     " 使用powerline打过补丁的字体
        let g:airline_powerline_fonts = 1
    "     " 开启tabline
        let g:airline_extensions = ['tagbar','tabline','ycm']
        let g:airline#extensions#tabline#enabled = 1
    "     " tabline中当前buffer两端的分隔字符
    "     " let g:airline#extensions#tabline#left_sep = ' '
    "     " tabline中未激活buffer两端的分隔字符
    "     let g:airline#extensions#tabline#left_alt_sep = '|'
    "     " tabline中buffer显示编号
        let g:airline#extensions#tabline#buffer_nr_show = 1
    "     " 映射切换buffer的键位
        nnoremap [b :bp<CR>
        nnoremap ]b :bn<CR>
    endif
" }


" vim-gui {
    set cino=(0,)0,b1,t0,i0
    set mouse=""                 " Automatically enable mouse usage
    set clipboard=""
    " colorscheme gruvbox
" }

" vim-encodings {
    set fileencodings=utf-8,ucs-bom,gb18030,gbk,gb2312,cp936
    set termencoding=utf-8
    set encoding=utf-8
" }

" Formatting {
    set expandtab                   " Tabs are spaces, not tabs
    set tabstop=4                   " An indentation every four columns
    " set shiftwidth=4
" }


" Vim-Command {
    nnoremap <leader>vr :.,$S//gec<left><left><left><left>
" }


" SnipMate {
    " Setting the author var
    " If forking, please overwrite in your .vimrc.local file
    let g:snips_author = 'zhoush <zhoush@capitek.com.cn>'
" }


" Ctrlp-funky {
    let g:ctrlp_funky_syntax_highlight = 1
    let g:ctrlp_funky_matchtype = 'path'
    nnoremap <Leader>fU :execute 'CtrlPFunky ' . expand('<cword>')<Cr>
" }


